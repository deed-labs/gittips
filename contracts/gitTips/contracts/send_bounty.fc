#include "imports/stdlib.fc";
#include "utils/errors.fc";
#include "utils/utils.fc";

;; save data (fee_rate - const fee in ton, admin address)
() save_data(int fee_rate, slice admin_address) impure inline {
    set_data(begin_cell()
        .store_uint(fee_rate, 32)
        .store_slice(admin_address)
        .end_cell()
    );
}

;; load data (fee_rate - const fee in ton)
(int, slice) load_data() inline {
    slice ds = get_data().begin_parse();

    return (
        ds~load_uint(64), ;; fee_rate
        ds~load_msg_addr() ;; admin_address
    );
}

;; load Hashmap with data
cell load_hashmap_data() {
	cell data = get_data();
	slice ds = data.begin_parse();
	if (ds.slice_bits() == 0) {
		return new_dict();
	} else {
		return data;
	}
}

;; get key from Hashmap
(int, slice) get_hashmap_key(slice key) method_id {
	cell dic = load_hashmap_data();
	(slice payload, int success) = dic.dict_get?(256, key);
	throw_unless(98, success);

    int budget = payload~load_uint(64);
	return (budget, payload);
}


;; Parse sender address from message; budget linked to sender address
slice parse_sender_address (cell in_msg_full) inline {
    var cs = in_msg_full.begin_parse();
    var flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    return sender_address;
}

;; 
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore
        return ();
    }

    (int fee_rate, slice admin_address) = load_data();

    (int op, int query_id) = in_msg_body~load_body_header();
    ;; or this solution
    ;; int op = in_msg_body~load_uint(32);
	;; int query_id = in_msg_body~load_uint(64);

    ;; hashmap storage
    cell data = get_data();
    slice ds = data.begin_parse();
    cell dic = ds.slice_bits() == 0 ? new_dict() : data;

    var sender_address = parse_sender_address(in_msg_full);

    ;; add budget to 'organization' wallet == sender address
    if (op == op::add_budget()) {
        throw_unless(error::invalid_operation, amount < 0); ;; check input amount

        int amount = in_msg_body~load_coins();

        ;; send budget tokens into admin address
        var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(admin_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(query_id, 32)
        .end_cell();

        send_raw_message(msg, 3); ;; mode 3 - pay fees separately and ignore errors

        ;; get current budget for sender_address
        (int current_budget, slice curr_address) = get_hashmap_key(sender_address);

        throw_unless(error::access_denied, equal_slices(sender_address, curr_address)); ;; check admin access

        ;; save info about budget into storage
        var budget = begin_cell()
            .store_uint(current_budget + amount, 64)
        .end_cell();

        dic~dict_set_builder(256, sender_address, budget);   
        set_data(dic);

        return ();
    }

    ;; delete budget from 'organization' wallet == sender address
    ;; if (op == op::delete_budget()) {
    ;;     throw_unless(error::invalid_operation, amount < 0); ;; check input amount

    ;;     int amount = in_msg_body~load_coins();

    ;;     ;; contract must send tokens to 'sender_address'
    ;;     ;; send_tokens(sender_address, amount, query_id);

    ;;     ;; get current budget for sender_address
    ;;     (address, current_budget) = get_hashmap_key(sender_address);

    ;;     ;; save info about budget into storage
    ;;     dic~udict_set(256, sender_address, current_budget - amount);   
    ;;     set_data(dic);

    ;;     return ();
    ;; }

    ;; set fee rate (for admin only)
    if (op == op::set_fee()) {
        throw_unless(error::invalid_operation, amount < 0); ;; check input amount

        throw_unless(error::access_denied, equal_slices(sender_address, admin_address)); ;; check admin access
        
        int fee_rate = in_msg_body~load_int(32);

        save_data(admin_address, fee_rate);

        return ();
    }

    ;; send payout to 'organization' wallet == sender address
    if (op == op::send_payout()) {
        return ();
    }

}

;; () send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
;;     int query_id = in_msg_body~load_uint(64);
;;     int jetton_amount = in_msg_body~load_coins();
;;     slice to_owner_address = in_msg_body~load_msg_addr();
;;     force_chain(to_owner_address);
;;       (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
;;     balance -= jetton_amount;

;;     throw_unless(error::access_denied, equal_slices(owner_address, sender_address));
;;     throw_unless(error::invalid_operation, balance >= 0);

;;     cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
;;     slice to_wallet_address = calculate_jetton_wallet_address(state_init);
;;     slice response_address = in_msg_body~load_msg_addr();
;;     cell custom_payload = in_msg_body~load_dict();
;;     int forward_ton_amount = in_msg_body~load_coins();
;;     throw_unless(708, slice_bits(in_msg_body) >= 1);
;;     slice either_forward_payload = in_msg_body;
;;     var msg = begin_cell()
;;                 .store_uint(0x18, 6)
;;                 .store_slice(to_wallet_address)
;;                 .store_coins(0)
;;                 .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
;;                 .store_ref(state_init);
;;     var msg_body = begin_cell()
;;                     .store_uint(op::internal_transfer(), 32)
;;                     .store_uint(query_id, 64)
;;                     .store_coins(jetton_amount)
;;                     .store_slice(owner_address)
;;                     .store_slice(response_address)
;;                     .store_coins(forward_ton_amount)
;;                     .store_slice(either_forward_payload)
;;                 .end_cell();

;;     msg = msg.store_ref(msg_body);
;;     int fwd_count = forward_ton_amount ? 2 : 1;
;;     throw_unless(709, msg_value >
;;                      forward_ton_amount +
;;         ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
;;         ;; but last one is optional (it is ok if it fails)
;;                      fwd_count * fwd_fee +
;;         (2 * gas_consumption() + min_tons_for_storage()));
;;     ;; universal message send fee calculation may be activated here
;;     ;; by using this instead of fwd_fee
;;     ;; msg_fwd_fee(to_wallet, msg_body, state_init, 15)

;;     send_raw_message(msg.end_cell(), 64); ;; revert on errors
;;     save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
;; }
