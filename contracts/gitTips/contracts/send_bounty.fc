#include "imports/stdlib.fc";

() recv_external(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore
        return ();
    }

    int op = in_msg_body~load_uint(32);

    if (op == op::transfer()) {
        send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }
}

() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    int amount = in_msg_body~load_coins();

    (int balance, slice owner_address) = load_data();

    balance -= amount;

    throw_unless(705, equal_slices(owner_address, sender_address));
    throw_unless(706, balance >= 0);

}


(int, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_coins(), ds~load_msg_addr());
}

() save_data (int balance, slice address) impure inline {
    set_data(organization_wallet_data(balance, address));
}


cell organization_wallet_data(int balance, slice address) inline {
    return  begin_cell()
            .store_coins(balance)
            .store_slice(address)
            .end_cell();
}
