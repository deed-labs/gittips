#include "op-codes.fc"; 
#include "imports/stdlib.fc";

;; admin_addr:MsgAddress
;; owner_addr:MsgAddress
() save_data(int fee_rate, slice admin_addr, slice owner_addr) impure inline {
    set_data(begin_cell()
                .store_slice(admin_addr)
                .store_slice(owner_addr)
            .end_cell());
}

(int, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();

    return (
        ds~load_msg_addr(), ;; admin address
        ds~load_msg_addr()  ;; owner address
    );
}

() withdraw(slice to_address) impure {
    ;; TODO
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    var cs = in_msg_full.begin_parse();  
    var flags = cs~load_uint(4); ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool

    if (flags & 1) {
        return (); ;; ignore all bounced messages
    }

    if (in_msg_body.slice_empty?()) {
        return (); ;; ignore empty messages
    }

    slice sender_address = cs~load_msg_addr();
    (_, int sender_address_hash) = parse_std_addr(sender_address);

    (int op, int query_id) = in_msg_body~load_body_header();

    if (op == op::add_budget) {
        ;; recieve coins and do nothing
        return ();
    } elseif (op == op::withdraw_budget) {
        (admin_addr, owner_addr) = load_data();
        (_, int admin_address_hash) = parse_std_addr(admin_addr);
        (_, int owner_address_hash) = parse_std_addr(owner_addr);
        (int budget_balance, _) = get_balance();

        throw_if(error::access_denied, admin_address_hash != sender_address_hash);

        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();

        (_, int to_address_hash) = parse_std_addr(to_address);

        ;; budget balance must not be less than withdrawal value
        throw_if(error::not_enough_budget_balance, budget_balance < amount);
        ;; budget can be withdrawed only to the owner address
        throw_if(error::access_denied, owner_address_hash != to_address_hash);

        cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(amount)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell();

        ;; send mode - 1 to pay transfer fees separately and revert on errors.
        send_raw_message(msg, 1); 

        return ();
    }

    throw(0xffff);
}